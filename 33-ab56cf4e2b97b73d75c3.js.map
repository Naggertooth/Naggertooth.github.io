{"version":3,"sources":["webpack:///./src/components/common/Graph/Plot/index.js","webpack:///./src/components/common/Graph/Calendar/index.js","webpack:///./src/components/ui/DropDown/index.js","webpack:///./src/components/common/Graph/Graph.js"],"names":["MyPlot","_ref","data","oX","timelines","selectedRange","range","dataPlot","x","y","values","type","mode","marker","color","layout","width","window","innerWidth","height","yaxis","side","domain","xaxis","tickformat","react_default","a","createElement","react_plotly_default","config","displaylogo","registerLocale","rus","graphFormat","helpers","constants","moment","Graph","changeRange","_useState","useState","iteraction","setIteraction","parseMoment","m1","m2","isAfter","format","isBefore","className","react_datepicker_es","Object","assign","maxDate","Date","open","locale","popperPlacement","popperModifiers","flip","enabled","preventOverflow","computeStyle","hide","startDate","toDate","endDate","length","onChange","date","JSON","stringify","selectsEnd","DropDown","rest","Dropdown","forms","graphTimes","serverFormat","recognizedFormat","ConnectedGraph","connect","state","timeline","form","infoMarkets","graph","dispatch","changeValue","field","value","change","getValuesPls","start","end","actions","default","getBriefcaseData","_ref2","timelineGraphFormat","parse","timelineObj","map","i","newArrays","QuickSort","A","B","aB","b","bB","p","pB","concat","axisX","axisY","setData","useEffect","styles","graph__container","plot","plot__title","title","controls","htmlFor","ddLabel","Field","name","component","ui_DropDown","e","d","placeholder","options","defaultValue","selection","plot__container","Plot","Graph_Calendar","EnhancedGraph","reduxForm","destroyOnUnmount","initialValues"],"mappings":"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","file":"33-ab56cf4e2b97b73d75c3.js","sourcesContent":["import React from 'react'\r\nimport Plot from 'react-plotly.js'\r\n\r\nconst MyPlot = ({ data }) => {\r\n    const oX = data.timelines\r\n    const selectedRange = data.range\r\n    const oY = data.values\r\n\r\n    const dataPlot = [\r\n        {\r\n            x: oX,\r\n            y: oY,\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            marker: { color: 'red' },\r\n        },\r\n    ]\r\n    const layout = {\r\n        width: window.innerWidth > 1599 ? 800 : 700,\r\n        height: 390,\r\n        yaxis: {\r\n            side: 'left',\r\n            domain: [0, 1],\r\n            // exponentformat: 'none',\r\n            // ticksuffix: ' Rub',\r\n        },\r\n        xaxis: {\r\n            type: 'date',\r\n            range: selectedRange,\r\n            // rangeslider: { range: oX },\r\n            tickformat: '%d %b\\n %Y',\r\n        },\r\n    }\r\n\r\n    return (\r\n        <Plot\r\n            data={dataPlot}\r\n            layout={layout}\r\n            config={{\r\n                displaylogo: false,\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default MyPlot\r\n","import React, { useState } from 'react'\r\nimport moment from 'moment'\r\nimport DatePicker, { registerLocale } from 'react-datepicker'\r\nimport rus from 'date-fns/locale/ru'\r\nimport './Calendar.scss'\r\n\r\nimport helpers from '../../../../helpers'\r\n\r\nregisterLocale('ru', rus)\r\n\r\nconst { graphFormat } = helpers.constants.moment\r\n\r\nconst Graph = ({ range, changeRange }) => {\r\n    const [iteraction, setIteraction] = useState(0)\r\n\r\n    const parseMoment = (m1, m2) => {\r\n        if (moment(m1).isAfter(m2) && iteraction === 0) {\r\n            return [moment(m1).format(graphFormat), moment(m1).format(graphFormat)]\r\n        }\r\n        if (moment(m2).isBefore(m1) && iteraction === 1) {\r\n            setIteraction(0)\r\n            return [moment(m2).format(graphFormat), moment(m2).format(graphFormat)]\r\n        }\r\n        return [moment(m1).format(graphFormat), moment(m2).format(graphFormat)]\r\n    }\r\n\r\n    const handleChange = (date) => {\r\n        if (iteraction === 0) {\r\n            setIteraction(1)\r\n            changeRange(JSON.stringify(parseMoment(\r\n                date,\r\n                date,\r\n            )))\r\n        } else {\r\n            setIteraction(0)\r\n            changeRange(JSON.stringify(parseMoment(range[0], date)))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"calendar\">\r\n            <DatePicker\r\n                maxDate={new Date()}\r\n                open\r\n                locale=\"ru\"\r\n                popperPlacement=\"bottom-start\"\r\n                popperModifiers={{\r\n                    flip: {\r\n                        enabled: false,\r\n                    },\r\n                    preventOverflow: {\r\n                        enabled: false,\r\n                    },\r\n                    computeStyle: {\r\n                        enabled: false,\r\n                    },\r\n                    hide: {\r\n                        enabled: false,\r\n                    },\r\n                }}\r\n                startDate={moment(range[0]).toDate()}\r\n                endDate={moment(range[range.length - 1]).toDate()}\r\n                onChange={handleChange}\r\n                {\r\n                ...iteraction === 0\r\n                    ? {}\r\n                    : {\r\n                        selectsEnd: true,\r\n                    }\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph\r\n","import React from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\nimport './DropDown.scss'\r\n\r\nconst DropDown = ({ ...rest }) => (\r\n    <Dropdown\r\n        {...rest}\r\n    />\r\n)\r\n\r\nexport default DropDown\r\n","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment'\r\nimport { Field, reduxForm, change } from 'redux-form'\r\n\r\nimport * as actions from '../../../redux/actions'\r\n\r\nimport Plot from './Plot'\r\nimport Calendar from './Calendar'\r\nimport DropDown from '../../ui/DropDown'\r\nimport helpers from '../../../helpers'\r\n\r\nimport styles from './Graph.module.scss'\r\n\r\nconst {\r\n    graphTimes, serverFormat, recognizedFormat, graphFormat,\r\n} = helpers.constants.forms\r\n\r\nfunction QuickSort({ A, B }) {\r\n    if (A && B && A.length && B.length) {\r\n        if (A.length === 0) return []\r\n        const a = []\r\n        const aB = []\r\n        const b = []\r\n        const bB = []\r\n        const p = A[0]\r\n        const pB = B[0]\r\n        for (let i = 1; i < A.length; i++) {\r\n            if (moment(A[i], graphFormat).isBefore(p, graphFormat)) {\r\n                a[a.length] = A[i]\r\n                aB[aB.length] = B[i]\r\n            } else {\r\n                b[b.length] = A[i]\r\n                bB[bB.length] = B[i]\r\n            }\r\n        }\r\n        return {\r\n            A: QuickSort({ A: a, B: aB }).A.concat(p, QuickSort({ A: b, B: bB }).A),\r\n            B: QuickSort({ A: a, B: aB }).B.concat(pB, QuickSort({ A: b, B: bB }).B),\r\n        }\r\n    }\r\n    return {\r\n        A: [],\r\n        B: [],\r\n    }\r\n}\r\n\r\nconst Graph = ({\r\n    timeline, changeValue, infoMarkets, getValuesPls,\r\n}) => {\r\n    const timelineGraphFormat = JSON.parse(timeline)\r\n    const timelineObj = timelineGraphFormat\r\n        .map(i => moment(i, graphFormat).format(recognizedFormat))\r\n\r\n    const newArrays = QuickSort({ A: infoMarkets.axisX, B: infoMarkets.axisY })\r\n\r\n    const [data, setData] = useState({\r\n        timelines: newArrays.A,\r\n        values: newArrays.B,\r\n        range: timelineGraphFormat,\r\n    })\r\n\r\n    useEffect(() => {\r\n        getValuesPls(\r\n            moment(timelineGraphFormat[0], graphFormat).format(serverFormat),\r\n            moment(timelineGraphFormat[timelineObj.length - 1], graphFormat).format(serverFormat),\r\n        )\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [timeline])\r\n\r\n    useEffect(() => {\r\n        setData({\r\n            timelines: newArrays.A,\r\n            values: newArrays.B,\r\n            range: timelineGraphFormat,\r\n        })\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [infoMarkets])\r\n\r\n    return (\r\n        <div className={styles.graph__container}>\r\n            <div className={styles.plot}>\r\n                <div className={styles.plot__title}>\r\n                    <span className={styles.title}>Динамика стоимости портфеля (руб.)</span>\r\n                    <form className={styles.controls}>\r\n                        <label htmlFor=\"timeline\" className={styles.ddLabel}>Показать за</label>\r\n                        <Field name=\"timeline\" component=\"input\" type=\"hidden\" />\r\n                        <DropDown\r\n                            onChange={(e, d) => changeValue('Graph', 'timeline', d.value)}\r\n                            placeholder=\"Промежуток времени\"\r\n                            options={graphTimes}\r\n                            defaultValue={graphTimes[1].value}\r\n                            selection\r\n                        />\r\n                    </form>\r\n                </div>\r\n                <div className={styles.plot__container}>\r\n                    <Plot data={data} />\r\n                </div>\r\n            </div>\r\n            <Calendar\r\n                changeRange={value => changeValue('Graph', 'timeline', value)}\r\n                range={timelineGraphFormat}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ConnectedGraph = connect(\r\n    state => ({\r\n        timeline: state.form.Graph.values.timeline,\r\n        infoMarkets: state.graph,\r\n    }),\r\n    dispatch => ({\r\n        changeValue: (form, field, value) => dispatch(change(form, field, value)),\r\n        getValuesPls: (start, end) =>\r\n            dispatch(actions.GraphActions.default.getBriefcaseData({ start, end })),\r\n    }),\r\n)(Graph)\r\n\r\nconst EnhancedGraph = reduxForm({\r\n    form: 'Graph',\r\n    destroyOnUnmount: false,\r\n    initialValues: {\r\n        timeline: graphTimes[1].value,\r\n    },\r\n})(ConnectedGraph)\r\n\r\nexport default EnhancedGraph\r\n"],"sourceRoot":""}