{"version":3,"sources":["webpack:///./src/components/common/Graph/Plot/index.js","webpack:///./src/components/common/Graph/Calendar/index.js","webpack:///./src/assets/stub.js","webpack:///./src/components/ui/DropDown/index.js","webpack:///./src/components/common/Graph/graph.js"],"names":["MyPlot","_ref","data","oX","timelines","selectedRange","range","oY","values","react_default","a","createElement","react_plotly_default","x","y","type","mode","marker","color","layout","width","window","innerWidth","height","yaxis","side","domain","xaxis","tickformat","registerLocale","rus","graphFormat","helpers","constants","moment","Graph","changeRange","_useState","useState","iteraction","setIteraction","parseMoment","m1","m2","isAfter","format","isBefore","className","react_datepicker_es","Object","assign","maxDate","Date","open","locale","popperPlacement","popperModifiers","flip","enabled","preventOverflow","computeStyle","hide","startDate","toDate","endDate","length","onChange","date","JSON","stringify","selectsEnd","client","2018.12.07_20-03-38","2018.12.10_17-03-07","2018.12.10_20-03-06","2019.01.10_17-03-23","2019.01.10_20-03-20","2019.02.11_17-03-16","2019.02.11_20-03-55","DropDown","rest","Dropdown","graphTimes","forms","keys","map","i","item","reduce","ConnectedGraph","connect","state","timeline","form","dispatch","changeValue","field","value","change","parse","styles","graph__container","plot","plot__title","title","controls","htmlFor","ddLabel","Field","name","component","ui_DropDown","e","d","placeholder","options","selection","plot__container","Plot","Graph_Calendar","EnhancedGraph","reduxForm","destroyOnUnmount","initialValues"],"mappings":"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","file":"11-2d343981dfe7b0bb6b54.js","sourcesContent":["import React from 'react'\nimport Plot from 'react-plotly.js'\n\nconst MyPlot = ({ data }) => {\n    const oX = data.timelines\n    const selectedRange = data.range\n    const oY = data.values\n\n    return (\n        <Plot\n            data={[\n                {\n                    x: oX,\n                    y: oY,\n                    type: 'scatter',\n                    mode: 'lines+markers',\n                    marker: { color: 'red' },\n                },\n            ]}\n            layout={{\n                width: window.innerWidth > 1600 ? 800 : 700,\n                height: 390,\n                yaxis: {\n                    side: 'left',\n                    domain: [0, 1],\n                    // exponentformat: 'none',\n                    // ticksuffix: ' Rub',\n                },\n                xaxis: {\n                    type: 'date',\n                    range: selectedRange,\n                    // rangeslider: { range: oX },\n                    tickformat: '%d %b\\n %Y',\n                },\n            }}\n        />\n    )\n}\n\nexport default MyPlot\n","import React, { useState } from 'react'\nimport moment from 'moment'\nimport DatePicker, { registerLocale } from 'react-datepicker'\nimport rus from 'date-fns/locale/ru'\nimport './Calendar.scss'\n\nimport helpers from '../../../../helpers'\n\nregisterLocale('ru', rus)\n\nconst { graphFormat } = helpers.constants.moment\n\nconst Graph = ({ range, changeRange }) => {\n    const [iteraction, setIteraction] = useState(0)\n\n    const parseMoment = (m1, m2) => {\n        if (moment(m1).isAfter(m2) && iteraction === 0) {\n            return [moment(m1).format(graphFormat), moment(m1).format(graphFormat)]\n        }\n        if (moment(m2).isBefore(m1) && iteraction === 1) {\n            setIteraction(0)\n            return [moment(m2).format(graphFormat), moment(m2).format(graphFormat)]\n        }\n        return [moment(m1).format(graphFormat), moment(m2).format(graphFormat)]\n    }\n\n    const handleChange = (date) => {\n        if (iteraction === 0) {\n            setIteraction(1)\n            changeRange(JSON.stringify(parseMoment(\n                date,\n                date,\n            )))\n        } else {\n            setIteraction(0)\n            changeRange(JSON.stringify(parseMoment(range[0], date)))\n        }\n    }\n\n    return (\n        <div className=\"calendar\">\n            <DatePicker\n                maxDate={new Date()}\n                open\n                locale=\"ru\"\n                popperPlacement=\"bottom-start\"\n                popperModifiers={{\n                    flip: {\n                        enabled: false,\n                    },\n                    preventOverflow: {\n                        enabled: false,\n                    },\n                    computeStyle: {\n                        enabled: false,\n                    },\n                    hide: {\n                        enabled: false,\n                    },\n                }}\n                startDate={moment(range[0]).toDate()}\n                endDate={moment(range[range.length - 1]).toDate()}\n                onChange={handleChange}\n                {\n                ...iteraction === 0\n                    ? {}\n                    : {\n                        selectsEnd: true,\n                    }\n                }\n            />\n        </div>\n    )\n}\n\nexport default Graph\n","const client = {\n    '2018.12.07_20-03-38': [\n        336235641,\n        497134.5653,\n        11207927.06,\n        128499775.9,\n    ],\n    '2018.12.10_17-03-07': [\n        337014136.9,\n        467643.6154,\n        31142771.46,\n        126514907.9,\n    ],\n    '2018.12.10_20-03-06': [\n        336091433.4,\n        467906.9171,\n        164014354.2,\n        126514907.9,\n    ],\n    '2019.01.10_17-03-23': [\n        340510909,\n        153397.2629,\n        416853910.8,\n        128587527.6,\n    ],\n    '2019.01.10_20-03-20': [\n        339774224.6,\n        153289.6844,\n        412928419.5,\n        128587527.6,\n    ],\n    '2019.02.11_17-03-16': [\n        321691334.3,\n        221477.922,\n        545883833.1,\n        133743237.6,\n    ],\n    '2019.02.11_20-03-55': [\n        322960130.8,\n        221917.8404,\n        543112304.6,\n        133743237.6,\n    ],\n}\n\nexport default client\n","import React from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\nimport './DropDown.scss'\n\nconst DropDown = ({ ...rest }) => (\n    <Dropdown\n        {...rest}\n    />\n)\n\nexport default DropDown\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport { Field, reduxForm, change } from 'redux-form'\n\nimport Plot from './Plot'\nimport Calendar from './Calendar'\nimport client from '../../../assets/stub'\nimport DropDown from '../../ui/DropDown'\nimport helpers from '../../../helpers'\n\nimport styles from './Graph.module.scss'\n\nconst { graphTimes } = helpers.constants.forms\n\nconst oX = Object.keys(client).map(i => moment(i, 'YYYY.MM.DD_HH-mm-ss').format('YYYY-MM-DDTHH:mm:ss'))\nconst oY = Object.values(client).map(item => item.reduce((a, i) => a + i, 0))\n\nconst Graph = ({ timeline, changeValue }) => {\n    const data = {\n        timelines: oX,\n        values: oY,\n        range: JSON.parse(timeline),\n    }\n\n\n    return (\n        <div className={styles.graph__container}>\n            <div className={styles.plot}>\n                <div className={styles.plot__title}>\n                    <span className={styles.title}>Динамика стоимости портфеля (руб.)</span>\n                    <form className={styles.controls}>\n                        <label htmlFor=\"timeline\" className={styles.ddLabel}>Показать за</label>\n                        <Field name=\"timeline\" component=\"input\" type=\"hidden\" />\n                        <DropDown\n                            onChange={(e, d) => changeValue('Graph', 'timeline', d.value)}\n                            placeholder=\"Промежуток времени\"\n                            options={graphTimes}\n                            selection\n                        />\n                    </form>\n                </div>\n                <div className={styles.plot__container}>\n                    <Plot data={data} />\n                </div>\n            </div>\n            <Calendar\n                changeRange={value => changeValue('Graph', 'timeline', value)}\n                range={JSON.parse(timeline)}\n            />\n        </div>\n    )\n}\n\nconst ConnectedGraph = connect(\n    state => ({\n        timeline: state.form.Graph.values.timeline,\n    }),\n    dispatch => ({\n        changeValue: (form, field, value) => dispatch(change(form, field, value)),\n    }),\n)(Graph)\n\nconst EnhancedGraph = reduxForm({\n    form: 'Graph',\n    destroyOnUnmount: false,\n    initialValues: {\n        timeline: JSON.stringify(oX),\n    },\n})(ConnectedGraph)\n\nexport default EnhancedGraph\n"],"sourceRoot":""}