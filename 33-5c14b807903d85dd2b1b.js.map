{"version":3,"sources":["webpack:///./src/components/common/Graph/Plot/index.js","webpack:///./src/components/common/Graph/Calendar/index.js","webpack:///./src/components/ui/DropDown/index.js","webpack:///./src/components/common/Graph/Graph.js"],"names":["MyPlot","_ref","data","oX","timelines","selectedRange","range","dataPlot","x","y","values","type","mode","marker","color","layout","width","window","innerWidth","height","yaxis","side","domain","xaxis","tickformat","react_default","a","createElement","react_plotly_default","config","displaylogo","registerLocale","rus","graphFormat","helpers","constants","moment","Graph","changeRange","_useState","useState","iteraction","setIteraction","parseMoment","m1","m2","isAfter","format","isBefore","className","react_datepicker_es","Object","assign","maxDate","Date","open","locale","popperPlacement","popperModifiers","flip","enabled","preventOverflow","computeStyle","hide","startDate","toDate","endDate","length","onChange","date","JSON","stringify","selectsEnd","DropDown","rest","Dropdown","forms","graphTimes","serverFormat","recognizedFormat","utils","graph","getAxisX","getAxisY","QuickSort","ConnectedGraph","connect","state","timeline","form","infoMarkets","dispatch","changeValue","field","value","change","getMarketsValues","start","end","actions","default","getBriefcaseData","props","objectWithoutPropertiesLoose_default","filterIndexes","location","timelineGraphFormat","parse","timelineObj","map","i","CurrencyMarketInfo","StockMarketInfo","StructureProductInfo","UrgentMarketInfo","setData","useEffect","defaultArray","ArrayOfObjects","Array","isArray","filter","index","includes","axisX","axisY","newArrays","A","B","styles","graph__container","plot","plot__title","title","controls","htmlFor","ddLabel","Field","name","component","ui_DropDown","e","d","placeholder","options","defaultValue","selection","plot__container","Plot","Graph_Calendar","EnhancedGraph","reduxForm","destroyOnUnmount","initialValues"],"mappings":"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","file":"33-5c14b807903d85dd2b1b.js","sourcesContent":["import React from 'react'\r\nimport Plot from 'react-plotly.js'\r\n\r\nconst MyPlot = ({ data }) => {\r\n    const oX = data.timelines\r\n    const selectedRange = data.range\r\n    const oY = data.values\r\n\r\n    const dataPlot = [\r\n        {\r\n            x: oX,\r\n            y: oY,\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            marker: { color: 'red' },\r\n        },\r\n    ]\r\n    const layout = {\r\n        width: window.innerWidth > 1599 ? 800 : 700,\r\n        height: 390,\r\n        yaxis: {\r\n            side: 'left',\r\n            domain: [0, 1],\r\n            // exponentformat: 'none',\r\n            // ticksuffix: ' Rub',\r\n        },\r\n        xaxis: {\r\n            type: 'date',\r\n            range: selectedRange,\r\n            // rangeslider: { range: oX },\r\n            tickformat: '%d %b\\n %Y',\r\n        },\r\n    }\r\n\r\n    return (\r\n        <Plot\r\n            data={dataPlot}\r\n            layout={layout}\r\n            config={{\r\n                displaylogo: false,\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default MyPlot\r\n","import React, { useState } from 'react'\r\nimport moment from 'moment'\r\nimport DatePicker, { registerLocale } from 'react-datepicker'\r\nimport rus from 'date-fns/locale/ru'\r\nimport './Calendar.scss'\r\n\r\nimport helpers from '../../../../helpers'\r\n\r\nregisterLocale('ru', rus)\r\n\r\nconst { graphFormat } = helpers.constants.moment\r\n\r\nconst Graph = ({ range, changeRange }) => {\r\n    const [iteraction, setIteraction] = useState(0)\r\n\r\n    const parseMoment = (m1, m2) => {\r\n        if (moment(m1).isAfter(m2) && iteraction === 0) {\r\n            return [moment(m1).format(graphFormat), moment(m1).format(graphFormat)]\r\n        }\r\n        if (moment(m2).isBefore(m1) && iteraction === 1) {\r\n            setIteraction(0)\r\n            return [moment(m2).format(graphFormat), moment(m2).format(graphFormat)]\r\n        }\r\n        return [moment(m1).format(graphFormat), moment(m2).format(graphFormat)]\r\n    }\r\n\r\n    const handleChange = (date) => {\r\n        if (iteraction === 0) {\r\n            setIteraction(1)\r\n            changeRange(JSON.stringify(parseMoment(\r\n                date,\r\n                date,\r\n            )))\r\n        } else {\r\n            setIteraction(0)\r\n            changeRange(JSON.stringify(parseMoment(range[0], date)))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"calendar\">\r\n            <DatePicker\r\n                maxDate={new Date()}\r\n                open\r\n                locale=\"ru\"\r\n                popperPlacement=\"bottom-start\"\r\n                popperModifiers={{\r\n                    flip: {\r\n                        enabled: false,\r\n                    },\r\n                    preventOverflow: {\r\n                        enabled: false,\r\n                    },\r\n                    computeStyle: {\r\n                        enabled: false,\r\n                    },\r\n                    hide: {\r\n                        enabled: false,\r\n                    },\r\n                }}\r\n                startDate={moment(range[0]).toDate()}\r\n                endDate={moment(range[range.length - 1]).toDate()}\r\n                onChange={handleChange}\r\n                {\r\n                ...iteraction === 0\r\n                    ? {}\r\n                    : {\r\n                        selectsEnd: true,\r\n                    }\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph\r\n","import React from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\nimport './DropDown.scss'\r\n\r\nconst DropDown = ({ ...rest }) => (\r\n    <Dropdown\r\n        {...rest}\r\n    />\r\n)\r\n\r\nexport default DropDown\r\n","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment'\r\nimport { Field, reduxForm, change } from 'redux-form'\r\n\r\nimport * as actions from '../../../redux/actions'\r\n\r\nimport Plot from './Plot'\r\nimport Calendar from './Calendar'\r\nimport DropDown from '../../ui/DropDown'\r\nimport helpers from '../../../helpers'\r\n\r\nimport styles from './Graph.module.scss'\r\n\r\nconst {\r\n    graphTimes, serverFormat, recognizedFormat, graphFormat,\r\n} = helpers.constants.forms\r\n\r\nconst { getAxisX, getAxisY, QuickSort } = helpers.utils.graph\r\n\r\nconst Graph = ({\r\n    timeline, changeValue, infoMarkets, getMarketsValues, ...props\r\n}) => {\r\n    const { filterIndexes, location } = props\r\n    const timelineGraphFormat = JSON.parse(timeline)\r\n    const timelineObj = timelineGraphFormat\r\n        .map(i => moment(i, graphFormat).format(recognizedFormat))\r\n\r\n    const {\r\n        CurrencyMarketInfo,\r\n        StockMarketInfo,\r\n        StructureProductInfo,\r\n        UrgentMarketInfo,\r\n    } = infoMarkets\r\n\r\n\r\n    const [data, setData] = useState({\r\n        timelines: [],\r\n        values: [],\r\n        range: timelineGraphFormat,\r\n    })\r\n\r\n    useEffect(() => {\r\n        getMarketsValues(\r\n            moment(timelineGraphFormat[0], graphFormat).format(serverFormat),\r\n            moment(timelineGraphFormat[timelineObj.length - 1], graphFormat).format(serverFormat),\r\n        )\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [timeline])\r\n\r\n    useEffect(() => {\r\n        const defaultArray = [\r\n            CurrencyMarketInfo,\r\n            StockMarketInfo,\r\n            StructureProductInfo,\r\n            UrgentMarketInfo,\r\n        ]\r\n        const ArrayOfObjects = Array.isArray(filterIndexes)\r\n            ? defaultArray.filter((i, index) => filterIndexes.includes(index))\r\n            : defaultArray\r\n\r\n        const axisX = getAxisX(ArrayOfObjects)\r\n        const axisY = getAxisY(axisX, ArrayOfObjects)\r\n\r\n        const newArrays = QuickSort({ A: axisX, B: axisY })\r\n        setData({\r\n            timelines: newArrays.A,\r\n            values: newArrays.B,\r\n            range: timelineGraphFormat,\r\n        })\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [infoMarkets, filterIndexes, location])\r\n\r\n    return (\r\n        <div className={styles.graph__container}>\r\n            <div className={styles.plot}>\r\n                <div className={styles.plot__title}>\r\n                    <span className={styles.title}>Динамика стоимости портфеля (руб.)</span>\r\n                    <form className={styles.controls}>\r\n                        <label htmlFor=\"timeline\" className={styles.ddLabel}>Показать за</label>\r\n                        <Field name=\"timeline\" component=\"input\" type=\"hidden\" />\r\n                        <DropDown\r\n                            onChange={(e, d) => changeValue('Graph', 'timeline', d.value)}\r\n                            placeholder=\"Промежуток времени\"\r\n                            options={graphTimes}\r\n                            defaultValue={graphTimes[1].value}\r\n                            selection\r\n                        />\r\n                    </form>\r\n                </div>\r\n                <div className={styles.plot__container}>\r\n                    <Plot data={data} />\r\n                </div>\r\n            </div>\r\n            <Calendar\r\n                changeRange={value => changeValue('Graph', 'timeline', value)}\r\n                range={timelineGraphFormat}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ConnectedGraph = connect(\r\n    state => ({\r\n        timeline: state.form.Graph.values.timeline,\r\n        infoMarkets: state.graph,\r\n    }),\r\n    dispatch => ({\r\n        changeValue: (form, field, value) => dispatch(change(form, field, value)),\r\n        getMarketsValues: (start, end) =>\r\n            dispatch(actions.GraphActions.default.getBriefcaseData({ start, end })),\r\n    }),\r\n)(Graph)\r\n\r\nconst EnhancedGraph = reduxForm({\r\n    form: 'Graph',\r\n    destroyOnUnmount: false,\r\n    initialValues: {\r\n        timeline: graphTimes[1].value,\r\n    },\r\n})(ConnectedGraph)\r\n\r\nexport default EnhancedGraph\r\n"],"sourceRoot":""}